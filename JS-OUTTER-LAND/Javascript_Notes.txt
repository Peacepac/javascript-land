JavaScript is a very powerful client-side scripting language.It   is used mainly for enhancing the interaction of a user with the webpage. In other words, you can make your webpage more lively and interactive, with the help of JavaScript. 

You should place all your JavaScript code within <script> tags (<script> and </script>) if you are keeping your JavaScript code within the HTML document itself. This helps your browser distinguish your JavaScript code from the rest of the code

Example:
<html>
<head>
 <title>My First JavaScript code!!!</title>
 <script>
  alert("Hello World!");
 </script>
</head>
<body>
</body>
</html>


JavaScript Variable: Declare, Assign a Value with Example

Variables are used to store values (name = “John”) or expressions (sum = x + y).

Declare Variables in JavaScript

Before using a variable, you first need to declare it. You have to use the keyword var, const, let to declare a variable like this:

VAR
var name;

Assign a Value to the Variable

You can assign a value to the variable either while declaring the variable or after declaring the variable.

var name = "John";

OR
var name; 
name = "John";


Naming Variables

variable names should start with a letter and they are case sensitive. Hence the variables student name and studentName are different because the letter n in a name is different (n and N).

<html>
<head>
<title>Variables!!!</title>
<script>
var one = 22;
var two = 3;
var add = one + two;
var minus = one - two;
var multiply = one * two;
var divide = one/two;
 document.write("First No: = " + one + "<br />Second No: = " + two + " <br />");
 document.write(one + " + " + two + " = " + add + "<br/>");
 document.write(one + " - " + two + " = " + minus + "<br/>");
 document.write(one + " * " + two + " = " + multiply + "<br/>");
 document.write(one + " / " + two + " = " + divide + "<br/>");
</script>
</head>
<body>
</body>
</html>


LET
Variables defined with let cannot be redeclared

Example
let x = "John Doe";

let x = 0;

// SyntaxError: 'x' has already been declared

Redeclaring a variable with let, in another block, IS allowed:

Example
<h2>JavaScript let</h2>

<p>Redeclaring a variable with <b>let</b>, in another s<h2>JavaScript let</h2>

<p>Redeclaring a variable with <b>let</b>, in another scopecope, or in another block, is allowed:</p>

<p id="demo"></p>
<script>
let x = 2; p id="demo"></p>
<script>
let x = 2;   // Allowed

{
  let x = 3;   // Allowed
}

{
  let x = 4;   <p>Redeclaring a variable with <b>let</b>, in another s<h2>JavaScript let</h2>

<p>Redeclaring a variable with <b>let</b>, in another scopecope, or in another block, is allowed:</p>

<p id="demo"></p>
<script>
let x = 2; p id="demo"></p>
<script<p>Redeclaring a variable with <b>let</b>, in another s<h2>JavaScript let</h2>

<p>Redeclaring a variable with <b>let</b>, in another scopecope, or in another block, is allowed:</p>

<p id="demo"></p>
<script>
let x = 2; p id="demo"></p>
<script>
let x = 2;   // Allowed

{

Const
A const variable cannot be reassigned but it  must be assigned a value when they are declared:
Example:
const PI = 3.14159265359;

NOT

const PI;
PI = 3.14159265359;


JavaScript Array Methods: Create with Example

An array is an object that can store a collection of items.It is used to store large amount of data of the same type

Suppose you want to store details of 500 employees. If you are using variables, you will have to create 500 variables whereas you can do the same with a single array. You can access the items in an array by referring to its indexnumber and the index of the the first element of an array is zero.

JavaScript Create Array

You can create an array in JavaScript as given below.

var students = ["John", "Ann", "Kevin"];

Here, you are initializing your array as and when it is created with values “John”, “Ann” and “Kevin”.The index of “John”, “Ann” and “Kevin” is 0, 1 and 2 respectively. If you want to add more elements to the students array, you can do it like this:

students[3] = "Emma"; students[4] = "Rose";

You can also create an array using Array constructor like this:

var students = new Array("John", "Ann", "Kevin");

OR

var students = new Array(); students[0] = "John"; students[1] = "Ann"; students[2] = "Kevin";

Array Methods

The Array object has many properties and methods which help developers to handle arrays easily and efficiently. You can get the value of a property by specifying arrayname.property and the output of a method by specifying arrayname.method().

length property –> If you want to know the number of elements in an array, you can use the length property.

prototype property –> If you want to add new properties and methods, you can use the prototype property.

reverse method –> You can reverse the order of items in an array using a reverse method.

sort method –> You can sort the items in an array using sort method.

pop method –> You can remove the last item of an array using a pop method.

shift method –> You can remove the first item of an array using shift method.

push method –> You can add a value as the last item of the array.

Example:

<title>Arrays!!!</title>
<script>
var students = new Array("John", "Ann", "Aaron", "Edwin", "Elizabeth");
Array.prototype.displayItems=function();
for (i=0;i<this.length;i++){
document.write(this[i] + "<br />");
}

} 

document.write("students array<br />");
students.displayItems();
document.write("<br />The number of items in students array is " + students.length + "<br />");

document.write("<br />The SORTED students array<br />");

students.sort();

students.displayItems();
document.write("<br />The REVERSED students array<br />");
students.reverse();
students.displayItems();

document.write("<br />THE students array after REMOVING the LAST item<br />");

students.pop();
students.displayItems();
document.write("<br />THE students array after PUSH<br />");
students.push("New Stuff");
students.displayItems();
</script>


JavaScript Functions

JavaScript function is a block of code designed to perform a particular task. It is executed when something invokes it (calls it).

<script>
function myFunction(p1, p2) {
  return p1 * p2;
}
<script>
function myFunction(p1, p2) {
  return p1 * p2;
}
document.getElementById("demo").innerHTML = myFunction(4, 3);
</script>

Function Syntax

is defined with the function keyword, followed by a name, followed by parentheses ().
 code to be executed, by the function, is placed inside curly brackets: {}

function name(parameter1, parameter2, parameter3) {
  // code to be executed
}
Function arguments are the values received by the function when it is invoked.


Function Return
When JavaScript reaches a return statement, the function will stop executing.


Functions often compute a return value. The return value is "returned" back to the "caller":

Example

Calculate the product of two numbers, and return the result:

<p id="peace"></p>

<script>
var x = myFunction(4, 3);
document.getElementById("peace").innerHTML = x;

function myFunction(a, b) {
  return a * b;
}
</script>

Example 2

Convert Fahrenheit to Celsius:

<p id="peace"></p>

<script>
function toCelsius(f) {
  return (5/9) * (f-32);
}
document.getElementById("peace").innerHTML = toCelsius(77);
</script>

The () Operator Invokes the Function

Using the example above, toCelsius refers to the function object, and toCelsius() refers to the function result.

Accessing a function without () will return the function object instead of the function result.

Example
<p id="demo"></p>

<script>
function toCelsius(f) {
  return (5/9) * (f-32);
}
document.getElementById("demo").innerHTML = toCelsius;
</script>

Local Variables

Variables declared within a JavaScript function, become LOCAL to the function.

Local variables can only be accessed from within the function.

<p id="demo1"></p>

<p id="demo2"></p>

<script>
myFunction();

function myFunction() {
  let carName = "Volvo";
  document.getElementById("demo1").innerHTML =
  typeof carName + " " + carName;
}

document.getElementById("demo2").innerHTML =
typeof carName;
</script>

JavaScript Objects
In real life, a car is an object.

A car has properties like weight and color, and methods like start and stop
Objects are variables too. But objects can contain many values.
is a common practice to declare objects with the const keyword

Object Definition
You define (and create) a JavaScript object with an object literal:

<p id="demo"></p>

<script>
// Create an object:
const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};

// Display some data from the object:
document.getElementById("demo").innerHTML =
person.firstName + " is " + person.age + " years old.";
</script>

Accessing Object Properties

You can access object properties in two ways:

objectName.propertyName

or

objectName["propertyName"]

<p id="demo"></p>

<script>
// Create an object:
const person = {
  firstName: "John",
  lastName : "Doe",
  id     :  5566
};
// Display some data from the object:
document.getElementById("demo").innerHTML =
person.firstName + " " + person.lastName;

OR
// Display some data from the object:
document.getElementById("demo").innerHTML =
person["firstName"] + " " + person["lastName"];
</script>

*JavaScript Events*

An HTML event can be something the browser does, or something a user does.

Here are some examples of HTML events:

An HTML web page has finished loading
An HTML input field was changed
An HTML button was clicked
Often, when events happen, you may want to do something.

JavaScript lets you execute code when events are detected.

HTML allows event handler attributes, with JavaScript code, to be added to HTML elements.

With single quotes:

<element event='some JavaScript'>

In the following example, an onclick attribute (with code), is added to a <button> element:

Example
<button onclick="document.getElementById('demo').innerHTML = Date()">The time is?</button>


*JavaScript Strings*

JavaScript strings are for storing and manipulating text.

A JavaScript string is zero or more characters written inside quotes.

Example
let text = "John Doe";

*String Length*
To find the length of a string, use the built-in length property:

Example
let text = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
let length = text.length;

*String Methods and Properties*
Primitive values, like "John Doe", cannot have properties or methods (because they are not objects).

But with JavaScript, methods and properties are also available to primitive values, because JavaScript treats primitive values as objects when executing methods and properties.

What is this?
In JavaScript, the this keyword refers to an object.

Which object depends on how this is being invoked (used or called).

In an object method, this refers to the object.Alone, this refers to the global object.In a function, this refers to the global object.In a function, in strict mode, this is undefined.In an event, this refers to the element that received the event.Methods like call(), apply(), and bind() can refer this to any object

In a function definition, this refers to the "owner" of the function.

In the example above, this is the person object that "owns" the fullName function.

In other words, this.firstName means the firstName property of this object.


For, While and Do While LOOP in JavaScript
Loops are useful when you have to execute the same lines of code repeatedly, for a specific number of times or as long as a specific condition is true.
Different Types of Loops
for loop

for/in a loop (explained later)

while loop

do…while loop


for loop

Syntax:

for(statement1; statement2; statment3) { lines of code to be executed }
The statement1 is executed first even before executing the looping code. So, this statement is normally used to assign values to variables that will be used inside the loop.
The statement2 is the condition to execute the loop.
The statement3 is executed every time after the looping code is executed. 
Example:
<html>
<head>
 <script type="text/javascript">
  var students = new Array("John", "Ann", "Aaron", "Edwin", "Elizabeth");
  document.write("<b>Using for loops </b><br />");
  for (i=0;i<students.length;i++)
  {
  document.write(students[i] + "<br />");
  }
 </script>
</head>
<body>
</body>
</html>


while loop
Syntax:

while(condition)

{

lines of code to be executed

}
The “while loop” is executed as long as the specified condition is true. Inside the while loop, you should include the statement that will end the loop at some point of time. Otherwise, your loop will never end and your browser may crash.


 <script>
  document.write("<b>Using while loops </b><br />");
  var i = 0, j = 1, k;
  document.write("Fibonacci series less than 40<br />");
  while(i<40)
  {
   document.write(i + "<br />");
   k = i+j;
   i = j;
   j = k;
  }
 </script>

do…while loop

Syntax:

do { block of code to be executed } while (condition)

The do…while loop is very similar to while loop. The only difference is that in do…while loop, the block of code gets executed once even before checking the condition
 <script>
  document.write("<b>Using do...while loops </b><br />");
  var i = 2;
  document.write("Even numbers less than 20<br />");
  do
  {
   document.write(i + "<br />");
   i = i + 2;
  }while(i<20)
 </script>


JavaScript Conditional Statements: IF, Else, Else IF

Conditional statements are used to decide the flow of execution based on different conditions. If a condition is true, you can perform one action and if the condition is false, you can perform another action
statements in JavaScript.

If statement

If…Else statement

If…Else If…Else statement

If statement

Syntax:

if (condition) { lines of code to be executed if condition is true }

You can use If statement if you want to check only a specific condition.

Example

 <title>IF Statments!!!</title>
 <script>
  var age = prompt("Please enter your age");
  if(age>=18)
  document.write("You are an adult <br />");
  if(age<18)
  document.write("You are NOT an adult <br />");
 </script>

If…Else statement

Syntax:

if (condition) { lines of code to be executed if the condition is true } else { lines of code to be executed if the condition is false }

You can use If….Else statement if you have to check two conditions and execute a different set of codes.


 <title>If...Else Statments!!!</title>
 <script>
  // Get the current hours 
  var hours = new Date().getHours();
  if(hours<12)
  document.write("Good Morning!!!<br />");
  else
  document.write("Good Afternoon!!!<br />");
 </script>

If…Else If…Else statement
Syntax:

if (condition1)

{

lines of code to be executed if condition1 is true

}

else if(condition2)

{

lines of code to be executed if condition2 is true

}

else

{

lines of code to be executed if condition1 is false and condition2 is false

}
You can use If….Else If….Else statement if you want to check more than two conditions



 <script>
  var one = prompt("Enter the first number");
  var two = prompt("Enter the second number");
  one = parseInt(one);
  two = parseInt(two);
  if (one == two)
   document.write(one + " is equal to " + two + ".");
  else if (one<two)
   document.write(one + " is less than " + two + ".");
  else
   document.write(one + " is greater than " + two + ".");
 </script>


JavaScript Maps

Essential Map Methods
Method Description
new Map()    Creates a new Map
set()    Sets the value for a key in a Map
get()    Gets the value for a key in a Map
delete()    Removes a Map element specified by the key
has() Returns true if a key exists in a Map
forEach() Calls a function for each key/value pair in a Map
entries() Returns an iterator with the [key, value] pairs in a Map
Property Description
size Returns the number of elements in a Map
How to Create a Map

The new Map() Method
You can create a Map by passing an Array to the new Map() constructor:

// Create a Map 
const fruits = new Map([
  ["apples", 500]
  ["bananas", 300],
  ["oranges", 200]
]);

document.getElementById("demo").innerHTML = fruits.get("apples");<script>
// Create a Map
const fruits = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);

document.getElementById("demo").innerHTML = fruits.get("apples");
</script>
<script>
// Create a Map
const fruits = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200],
]);

document.getElementById("demo").innerHTML = fruits.get("apples");
</script>


The set() Method

You can add elements to a Map with the set() method:

<!DOCTYPE html>
<html>
<body>
<h2>JavaScript Map Objects</h2>
<p>Using Map.set():</p>

<p id="demo"></p>

<script>
// Create a Map
const fruits = new Map();

// Set Map Values
fruits.set("apples", 500);
fruits.set("bananas", 300);
fruits.set("oranges", 200);

document.getElementById("demo").innerHTML = fruits.get("apples");
</script>


The set() method can also be used to change existing Map values:

Example

fruits.set("apples", 200);

The get() Method

The get() method gets the value of a key in a Map:

(fruits.get("apples");    // Returns 500)
Example
document.getElementById("demo").innerHTML = fruits.get("apples");

The size Property

The size property returns the number of elements in a Map:
Example

fruits.size;

The delete() Method

The delete() method removes a Map element:

Example

fruits.delete("apples");


 has() Method

The has() method returns true if a key exists in a Map:

Example

fruits.has("apples");

<!DOCTYPE html>
<html>
<body>
<h2>JavaScript Maps</h2>
<p>Using Map.has():</p>

<p id="demo"></p>

<script>
// Create a Map
const fruits = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);

// Delete an Element
fruits.delete("apples");

document.getElementById("demo").innerHTML = fruits.has("apples");
</script>

*JavaScript typeof*
In JavaScript there are 5 different data types that can contain values:

string
number
boolean
object
function

There are 6 types of objects:

Object
Date
Array
String
Number
Boolean
And 2 data types that cannot contain values:

null
undefined

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML = 
  typeof "john" + "<br>" +
  typeof 3.14 + "<br>" +
  typeof NaN + "<br>" +
  typeof false + "<br>" +
  typeof [1,2,3,4] + "<br>" +
  typeof {name:'john', age:34} + "<br>" +
  typeof new Date() + "<br>" +
  typeof function () {} + "<br>" +
  typeof myCar + "<br>" +
  typeof null;
</script>

The typeof operator is used to get the data type (returns a string) of its operand. The operand can be either a 
literal or a data structure such as a variable, a function, or an object. The operator returns the data type.



Syntax

typeof operand
or
typeof (operand)

<script>
var index = 8;
  var result = (typeof index === 'number');
  alert(result);
  // Output: true
var description = "w3resource";
  var result = (typeof description === 'string');
  alert(result); 
  // Output: true

</script>

*JavaScript Type Conversion*
Converting Strings to Numbers
The global method Number() can convert strings to numbers.
Number("3.14")    // returns 3.14
Number(" ")       // returns 0
Number("")        // returns 0
Number("99 88")   // returns NaN
*Number Methods*
Method	Description
Number()	Returns a number, converted from its argument
parseFloat()	Parses a string and returns a floating point number
parseInt()	Parses a string and returns an integer


*Converting Numbers to Strings*
The global method String() can convert numbers to strings.
<p id="demo"></p>

<script>
let x = 123;
document.getElementById("demo").innerHTML =
  String(x) + "<br>" +
  String(123) + "<br>" +
  String(100 + 23);
</script>

The Number method toString() does the same.<p id="tostring"></p>

<script>
let x = 123;
document.getElementById("tostring").innerHTML =
  x.toString() + "<br>" +
   (123).toString() + "<br>" +
   (100 + 23).toString();
</script>


Converting Dates to Numbers
The global method Number() can be used to convert dates to numbers
/ program to convert date to number
// create date
const d1 = new Date();
console.log(d1);

// converting to number
const result = d1.getTime();
console.log(result);

The date method getTime() does the same.
To convert the name to a number, we use the getTime() method.
const d1 = new Date().getTime();
console.log(d1); // 1604898452084

*Converting Dates to Strings*
script>
   // Here a date has been assigned
   // while creating Date object
   var dateobj = 
   new Date('October 15, 1996 05:35:32');
  
   // Contents of above date object is converted
   // into a string using toString() function.
   var B = dateobj.toString();
  
   // Printing the converted string.
   document.write(B);
</script>

*Converting Booleans to Numbers*
<!DOCTYPE html>
<html>
<body>
	<center>
		<h1 style="color:green">GeeksforGeeks</h1>
		<p>Click the button to change the boolean value.</p>
		<script>
			// Initializing boolvalue as true
			var boolvalue = true;
			// Initializing boolvalue2 as false
			var boolvalue2 = false;
		</script>
		<button onclick="myFunction()">Change</button>
		<p>The value of the variable 1 is now:</p>
		<p id="result"></p>
		<p>The value of the variable 2 is now:</p>
		<p id="result2"></p>
		<script>
			// JavaScript program to illustrate boolean
			// conversion using bitwise operator
			function myFunction(){
				var i = boolvalue & 1;
				var j = boolvalue2 | 0;
				document.getElementById("result").innerHTML = i;
				document.getElementById("result2").innerHTML = j;
			}
		</script>
</body>
</html>
		



*Converting Booleans to Strings*
<p id="demo"></p>

<script>
let bool = true;
let text = bool.toString(); 
document.getElementById("demo").innerHTML = typeof text;
</script>


*JavaScript Errors*
The try...catch...finally statements combo handles errors without stopping JavaScript.

The try statement defines the code block to run (to try).

The catch statement defines a code block to handle any error.

The finally statement defines a code block to run regardless of the result.

The throw statement defines a custom error.

Both catch and finally are optional, but you must use one of them.

try {
  tryCode - Code block to run
}
catch(err) {
  catchCode - Code block to handle errors
}
finally {
  finallyCode - Code block to be executed regardless of the try result
}


*JavaScript Hoisting*
Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution.

Declaration –> Initialisation/Assignment –> Usage 
// Variable lifecycle
let a;        // Declaration
a = 100;      // Assignment
console.log(a);  // Usage

// hoisting
function codeHoist(){
	a = 10;
	let b = 50;
}
codeHoist();

console.log(a); // 10
console.log(b); // ReferenceError : b is not defined


*JavaScript Use Strict*
"use strict"; Defines that JavaScript code should be executed in "strict mode".

The purpose of "use strict" is to indicate that the code should be executed in "strict mode".

With strict mode, you can not, for example, use undeclared variables.

*Declaring Strict Mode*
<script>
"use strict";
myFunction();

function myFunction() {
  y = 3.14;   // This will cause an error (y is not defined)
}
</script>


*The JavaScript this Keyword*

In an object method, this refers to the object.
example
<p id="demo"></p>

<script>
// Create an object:
const person = {
  firstName: "John",
  lastName: "Doe",
  id: 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};

// Display data from the object:
document.getElementById("demo").innerHTML = person.fullName();
</script>

Alone, this refers to the global object.
example
<script>
let x = this;
document.getElementById("demo").innerHTML = x;
</script>

In a function, this refers to the global object.
example
<script>
document.getElementById("demo").innerHTML = myFunction();

function myFunction() {
  return this;
}
</script>

In a function, in strict mode, this is undefined.
example
<script>
"use strict";
document.getElementById("demo").innerHTML = myFunction();

function myFunction() {
  return this;
}
</script>
In an event, this refers to the element that received the event.
example

Methods like call(), apply(), and bind() can refer this to any object.


<p id="demo"></p>

<script>
// Create an object:
const person = {
  firstName: "John",
  lastName: "Doe",
  id: 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};

// Display data from the object:
document.getElementById("demo").innerHTML = person.fullName();
</script>


*JavaScript Arrow Function*
It allows you to create functions in a cleaner way compared to regular functions.
example,

This function
// function expression
let x = function(x, y) {
   return x * y;
}
can be written as

// using arrow functions
let x = (x, y) => x * y;
using an arrow function.

*Arrow Function Syntax*
let myFunction = (arg1, arg2, ...argN) => {
    statement(s)
}

Example 1: Arrow Function with No Argument
If a function doesn't take any argument, then you should use empty parentheses.
et greet = () => console.log('Hello');
greet(); // Hello

Example 2: Arrow Function with One Argument
If a function has only one argument, you can omit the parentheses. For example,

let greet = x => console.log(x);
greet('Hello'); // Hello 

Example 3: Arrow Function as an Expression
You can also dynamically create a function and use it as an expression. For example,

let age = 5;

let welcome = (age < 18) ?
  () => console.log('Baby') :
  () => console.log('Adult');

welcome(); // Baby





JavaScript Arrow Function
In this tutorial, you will learn about JavaScript arrow function with the help of examples.

Arrow function is one of the features introduced in the ES6 version of JavaScript. It allows you to create functions in a cleaner way compared to regular functions. For example,

This function

// function expression
let x = function(x, y) {
   return x * y;
}
can be written as

// using arrow functions
let x = (x, y) => x * y;
using an arrow function.

Arrow Function Syntax
The syntax of the arrow function is:

let myFunction = (arg1, arg2, ...argN) => {
    statement(s)
}
Here,

myFunction is the name of the function
arg1, arg2, ...argN are the function arguments
statement(s) is the function body
If the body has single statement or expression, you can write arrow function as:

let myFunction = (arg1, arg2, ...argN) => expression


Example 1: Arrow Function with No Argument
If a function doesn't take any argument, then you should use empty parentheses. For example,

let greet = () => console.log('Hello');
greet(); // Hello


Example 2: Arrow Function with One Argument
If a function has only one argument, you can omit the parentheses. For example,

let greet = x => console.log(x);
greet('Hello'); // Hello 


Example 3: Arrow Function as an Expression
You can also dynamically create a function and use it as an expression. For example,

let age = 5;

let welcome = (age < 18) ?
  () => console.log('Baby') :
  () => console.log('Adult');

welcome(); // Baby


Example 4: Multiline Arrow Functions
If a function body has multiple statements, you need to put them inside curly brackets {}. For example,

let sum = (a, b) => {
    let result = a + b;
    return result;
}

let result1 = sum(5,7);
console.log(result1); // 12


*"this" with Arrow Function*





JavaScript Arrow Function
In this tutorial, you will learn about JavaScript arrow function with the help of examples.

Arrow function is one of the features introduced in the ES6 version of JavaScript. It allows you to create functions in a cleaner way compared to regular functions. For example,

This function

// function expression
let x = function(x, y) {
   return x * y;
}
can be written as

// using arrow functions
let x = (x, y) => x * y;
using an arrow function.

Arrow Function Syntax
The syntax of the arrow function is:

let myFunction = (arg1, arg2, ...argN) => {
    statement(s)
}
Here,

myFunction is the name of the function
arg1, arg2, ...argN are the function arguments
statement(s) is the function body
If the body has single statement or expression, you can write arrow function as:

let myFunction = (arg1, arg2, ...argN) => expression
Example 1: Arrow Function with No Argument
If a function doesn't take any argument, then you should use empty parentheses. For example,

let greet = () => console.log('Hello');
greet(); // Hello
Example 2: Arrow Function with One Argument
If a function has only one argument, you can omit the parentheses. For example,

let greet = x => console.log(x);
greet('Hello'); // Hello 
Example 3: Arrow Function as an Expression
You can also dynamically create a function and use it as an expression. For example,

let age = 5;

let welcome = (age < 18) ?
  () => console.log('Baby') :
  () => console.log('Adult');

welcome(); // Baby
Example 4: Multiline Arrow Functions
If a function body has multiple statements, you need to put them inside curly brackets {}. For example,

let sum = (a, b) => {
    let result = a + b;
    return result;
}

let result1 = sum(5,7);
console.log(result1); // 12


*"this" with Arrow Function*
Inside a regular function, this keyword refers to the function where it is called.
However, this is not associated with arrow functions. Arrow function does not have its own this. So whenever you call this, it refers to its parent scope. For example,

Inside a regular function
function Person() {
    this.name = 'Jack',
    this.age = 25,
    this.sayName = function () {

        // this is accessible
        console.log(this.age);

        function innerFunc() {
	

            // this refers to the global object
            console.log(this.age);
            console.log(this);
        }

        innerFunc();

    }
}

let x = new Person();
x.sayName();


Inside an arrow function

function Person() {
    this.name = 'Jack',
    this.age = 25,
    this.sayName = function () {

        console.log(this.age);
        let innerFunc = () => {
            console.log(this.age);
        }

        innerFunc();
    }
}

const x = new Person();
x.sayName();



*JavaScript Classes*

JavaScript Class Syntax
Use the keyword class to create a class.
Always add a method named constructor():

class ClassName {
  constructor() { ... }
}


Example
class Car {
  constructor(name, year) {
    this.name = name;
    this.year = year;
  }
}


Class Methods

Class methods are created with the same syntax as object methods.

class ClassName {
  constructor() { ... }
  method_1() { ... }
  method_2() { ... }
  method_3() { ... }
}

class Car {
  constructor(name, year) {
    this.name = name;
    this.year = year;
  }
  age() {
    let date = new Date();
    return date.getFullYear() - this.year;
  }
}

let myCar = new Car("Ford", 2014);
document.getElementById("demo").innerHTML =
"My car is " + myCar.age() + " years old.";


*JavaScript JSON*

JSON is a format for storing and transporting data. It is often used when data is sent from a server to a web page.

JSON Example

{
"employees":[
  {"firstName":"John", "lastName":"Doe"},
  {"firstName":"Anna", "lastName":"Smith"},
  {"firstName":"Peter", "lastName":"Jones"}
]
}

*JS VERSION*

JavaScript / ECMAScript
JavaScript was invented by Brendan Eich in 1995.

It was developed for Netscape 2, and became the ECMA-262 standard in 1997.

After Netscape handed JavaScript over to ECMA, the Mozilla foundation continued to develop JavaScript for the Firefox browser. Mozilla's latest version was 1.8.5. (Identical to ES5).

Internet Explorer (IE4) was the first browser to support ECMA-262 Edition 1 (ES1)

From ES4 to ES6
When the TC39 committee got together in Oslo in 2008, to agree on ECMAScript 4, they were divided into 2 very different camps:

The ECMAScript 3.1 Camp:
Microsoft and Yahoo who wanted an incremental upgrade from ES3.

The ECMAScript 4 Camp:
Adobe, Mozilla, Opera, and Google who wanted a massive ES4 upgrade.

August 13 2008, Brendan Eich wrote an email:

It's no secret that the JavaScript standards body, Ecma's Technical Committee 39, has been split for over a year, with some members favoring ES4, a major fourth edition to ECMA-262, and others advocating ES3.1 based on the existing ECMA-262 Edition 3 (ES3) specification. Now, I'm happy to report, the split is over.

The solution was to work together:

ECMAScript 4 was renamed to ES5
ES5 should be an incremental upgrade of ECMAScript 3.
Features of ECMAScript 4 should be picked up in later versions.
TC39 should develop a new major release, bigger in scope than ES5.
The planned new release (ES6) was codenamed "Harmony" (Because of the split it created?).
